package Component.TestFixtures.Workstation;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.awt.Dimension;
import java.awt.Point;
import java.lang.reflect.Method;

import GenCol.entity;
import model.modeling.message;
import model.modeling.script.SimpleTestFrame;
import view.modeling.ViewableComponent;
import view.modeling.ViewableDigraph;

public class wsFrame extends SimpleTestFrame
{
    public final static double DEFAULT_PROC_TIME = 10.0;
    public final static int DEFAULT_CAPACITY = 1;
    
    public wsFrame()
    {
        this("testframe", null);
    }

    public wsFrame(String name, Method run_case)
    {
        super(name, run_case);
        
        setTestModel(new ws("ws", DEFAULT_PROC_TIME, DEFAULT_CAPACITY)); 
    }

    @TestScript(canSequence = true)
    public void TestNormal() throws InterruptedException
    {
        entity job1 = new entity("job1");
        entity job2 = new entity("job2");
        entity job_out;
        
        // The capacity for the buffer is 1, but the first job should immediately
        // begin processing.
        
        Inject("in", job1);
        Inject("in", job2);

        job_out = WaitForOutputAt(DEFAULT_PROC_TIME, "out", false, false);
        assertEquals(job1, job_out);

        job_out = WaitForOutputAt(DEFAULT_PROC_TIME, "out", false, false);
        assertEquals(job2, job_out);
    }
    
    @TestScript(canSequence = true)
    public void TestBalked() throws InterruptedException
    {
        message m = new message();

        m.add(makeContent("in", new entity("job")));
        m.add(makeContent("in", new entity("job")));
        m.add(makeContent("in", new entity("job")));
        
        // 1 job should immediately begin processing, 1 should queue in buffer,
        // and 1 should balked out of the workstation.
        
        Inject(m);
        
        entity e = ReadOutput("fail", false);
        assertEquals(e.getName(), "job");

        WaitForOutputAt(DEFAULT_PROC_TIME, "out", false, false);
        WaitForOutputAt(DEFAULT_PROC_TIME, "out", false, false);
        
        // Nothing else should leave the workstation
        
        Wait(DEFAULT_PROC_TIME * 5, false);
    }
    
    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    @Override
    public void layoutForSimViewRedirect(ViewableDigraph model)
    {
        model.setPreferredSize(new Dimension(590, 286));
        ((ViewableComponent)model.withName("testframe")).setPreferredLocation(new Point(282, 18));
        ((ViewableComponent)model.withName("ws")).setPreferredLocation(new Point(23, 89));
    }
}
