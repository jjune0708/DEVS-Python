;(load "digraph.f")

(build-module bi-tree
              (
               (tr (digraph))
               (root '())
               (leaves '())
              )
              (
(set-root (rt)    (lambda (rt) (if (null? root)
                                     (begin
                                        (set! root rt)
                                        (di-initialize tr root)
                                        (set! leaves (list root))
                                     )
                                    (display "root already exists"))
                      )
)
(show-root  ()      (lambda ()  root) )
(bi-add   (node)       (lambda (node)
                         (if  (member node (nodes? tr))
                             (display "node already in tree")
                         (let (
                               (c (current? tr))
                              )
                                (if (member c leaves)
                                    (set! leaves (remove c leaves)))
                                (set! leaves (cons node leaves))
                                (di-add tr node)
                                (set-current tr node)
                                (di-add tr c)
                                (set-current tr c)
                         )
                         ))
)
(root?  (node)       (lambda (node) (equal? node root)))
(leaf?  ()       (lambda ()(member cur leaves)))
(set-leaves (lst)  (lambda(lst)(set! leaves lst)))
(leaves? ()      (lambda()leaves))

       (bi-current?  ()   (lambda () (current? tr))
       )
       (bi-set-current (node) (lambda (node) (set-current tr node))
       )
       (bi-nodes?  ()     (lambda ()(nodes? tr))
       )
       (bi-edges?  ()     (lambda ()(edges? tr))
       )
       (bi-outg?  ()      (lambda ()(outg? tr))
       )
       (bi-inc?  ()       (lambda ()(inc? tr))
       )
       (bi-successors? () (lambda ()(successorss? tr))
       )
       (bi-del-edge (node)     (lambda (node)(del-edge tr node))
       )
       (bi-del-node (node)     (lambda (node)(del-node tr node))
       )
       (bi-insert-pair (n1 n2 pn1 pn2)  (lambda (n1 n2 pn1 pn2)
                           (di-insert-pair tr n1 n2 pn1 pn2))
       )
       (bi-del-pair (n1 n2 pn1)  (lambda (n1 n2 pn1)
                                  (di-delete-pair tr n1 n2 pn1))
       )
       (bi-associate (edge pn1)   (lambda (edge pn1)(associate tr edge pn1))
       )
       (bi-add-nodes (lst)  (lambda(lst)(add-nodes tr lst))
       )
       (bi-add-edge  (l r pairs)   (lambda(l r pairs)(add-edge tr l r pairs))
       )
))

(define (show-branches tr)
(show-edge (bi-edges? tr))
)

(define (show-leaves tr)
(show-names (leaves? tr))
)

(define (show-interior tr)
(show-names (difference (bi-nodes? tr) (leaves? tr)))
)

(define (copy-tree tr tab)
(let (
     (new (bi-tree))
     )
(set-root new (table-look-up tab (show-root tr)))
(set-leaves new (map (lambda(n)(table-look-up tab n))(leaves? tr)))
(bi-add-nodes new (map (lambda(n)(table-look-up tab n)) (bi-nodes? tr)))
(for-each (lambda(e)(bi-add-edge new (table-look-up tab (link-left e))
                                  (table-look-up tab (link-right e))
                                  (link-port-pairs e)))
       (bi-edges? tr))
new
))
