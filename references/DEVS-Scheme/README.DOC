                                 IMPORTANT

Create file directories in your hard disk exactly as they are on this disk 
(otherwise you will have to change the scheme.ini files).

If you do not have extended memory you should comment out (load "ent.ini") 
from scheme.ini in such directories as \scheme\devs\simparc

CAUTION: SCHEME behaves strangely when RAM is nearly full -- AND it doesn't
give warning that it is doing so. If you get errors after running for a 
while that you don't get when starting, suspect this cause!!!!!

                                HELP

Interactive help is obtainable by answering yes during loading. Both the 
SCHEME directory (which contains general utilities developed for 
DEVS-Scheme) and the DEVSOURCE directories have INDEX files which provide 
access to the source code of all definitions, macros, aliases, and modules.


                       SOME HELPFUL GENERAL FEATURES 

(bc) clears the screen
(dc) temporarily exits to dos (dos-call "" "")

(evl 19) is equivalent to (eval (%c 19)) and will re-evaluate the input to 
the 19th prompt

(lk 20) will display the input to the 20'th prompt and call a procedure 
that enables reviewing other input. Responses are:
e = evaluate, f = forward, b = backward, x = exit, a 1 = show all from here 
back to prompt 1.

(start-rep) will load a read-eval-print loop which does not garbage collect
after every call to inspector. This speeds up development when extended 
memory is being used.

                        EXAMPLE OF SIMPLE COMPUTER MODELS

go to directory \scheme\devs\simparc
enter pcs or pcsext (or pcsexp if have expanded rather than extended memory)
then load a model, e.g.,

[1] (load "mbase\\mul-ef.m")   (or load "mbase/ef-mul.m")          

and run:

[2] (res mul-r)     ;;;is the root-co-ordinator defined and initialized in 
                       the file 


                       SIMULATION EXECUTIVE

(initialize [or init] root-co-ordinator processor) now also resets the 
clock to 0. When you restart, the clock base is updated: all 
timing in the messages exchanged among processors is relative to zero and 
translated to current time by adding clock-base 

(restart [or res] root-co-ordinator {lst})  enables batch loading of files 
 (e.g.  initialization) with optional interactivity as well.  If lst is 
 given and any element in it is not an existing file then the run will be 
 interactive and (in any event) the existing files will be loaded otherwise 
 (if all files exist) the run is not interactive. An exception: if lst has 
 one element, not a file, the run is not interactive.
                  
 examples:

 (res r) is interactive.

 (res r 0) is not interactive --  use it to avoid having to initialize 
      manually (run from the last state)

 (res r "f.ini" "g.ini") is not interactive if these are both files 
    --use this to run in batch mode

 (res r "f.ini" "g.ini" 0) is the same but interactive          
    --use this to initialize by both loading files and manual setting


Pressing <cntr> T for terminate will have the following effect:

in pause mode: will stop the run at the next inter-processor message, thus 
yielding an incomplete state 

in non-pause mode: will wait until the root-co-ordinator gets the next done 
message before stoping thus yielding a complete state which can be 
restarted without problem

in either case: continuation of the run may be had by pressing <cntl> g to 
tell the inpector to GO (this resumes proper processing in both cases) or 
by doing (restart root-co-ordinator) after <cntl> q.  

Pressing <cntr> P for adjusting windows: give atomic model or non-atomic 
model (in which case all sub atomic models will be querried). Arrow keys 
may be hit directly to position and size windows.

(send model set-state) called directly or via restart will test for entry 
of the proper number of entries. You must retype the list of values each 
time you get it wrong. You can select the variables to be displayed by 
pressing 'd to the prompt.

(screen-copy) can be issued at any time and will create a new file 
scrcopy.n where n is an integer which increases each time.


                        EXAMPLE OF HYPERCUBE MODELS       

NOTE: creation of kernel models is sped up by loading pseudo.f which 
substitutes the creation of "pseudo" classes for scoops classes. These 
classes do not have inheritance properties, they serve only to keep track 
of lists of members for the kernel models.  

go to directory \scheme\devs\rule
enter pcsext (or pcsexp if have expanded rather than extended memory)
then:

[1] (load-entstr p:arc-c@h)
-ENT : ARC
--ASP : COMP-DEC  ,coupling -> ()
---ENT : CPUS
----ASP : CPUS-MULT-ASP
  ,mult-coup-type -> HYPERCUBE
  ,dim-mult-children -> 0  ,coupling -> ()
-----ENT : CPU-V1.P
end of display
()
[2] (transform  p:arc-c@h)

=============
root-co-ordinator: R:ARC
-model: ARC---> processor: C:ARC
--model: hc-CPUS---> processor: C:hc-CPUS
=============  

;;;;;;to set up a hypercube do restart and answer init-new first to create 
the structure then later init-all to initialize it (init-one will 
initialize one component and then copy this state to all; here all will 
already be initialized).

[3] (res r:arc)
<CTRL>Switch-mode <CTRL>Place-leaf 
<CTRL>Terminate   <CTRL>Help/?
type any key to continue
Wish to initialize  ARC ? (y/n)
y
Wish to initialize  hc-CPUS-INIT-CELL
 ? (y/n)
n
Wish to initialize  hc-CPUS ? (y/n)
y
for hc-CPUS
choose one of:  (INIT-NEW INIT-PROCS 
INIT-ONE INIT-ALL)
init-new
init-new for hc-CPUS
enter basic name of member and dimension desired cpu 2
choose ext-coup-type of : (origin-only  broadcast) origin-only
choose num of influencees : [0 .. 2] 2

enter out-in-coup table
as list of influencee-output-input port triples 
(((0 1) pass-read pass-read)
((0 1) pass-write pass-write)
((0 1) mem mem)((1 0) pass-read pass-read)
((1 0) pass-write pass-write)((1 0) mem mem))


cell-position of a DIGRAPH-MODEL  CPU0
 is (0 0)
cell-position of a DIGRAPH-MODEL  CPU1
 is (0 1)
cell-position of a DIGRAPH-MODEL  CPU2
 is (1 0)
cell-position of a DIGRAPH-MODEL  CPU3
 is (1 1)

Wish to initialize  hc-CPUS-INIT-CELL ? (y/n)
n

=============
root-co-ordinator: R:ARC
-model: ARC---> processor: C:ARC
--model: hc-CPUS---> processor: C:hc-CPUS
---model: CPU3---> processor: C:CPU3
----model: INF-MOD3---> processor: C:INF-MOD3
-----model: INFEN3---> processor: S:INFEN3
-----model: INFEN-DELY3---> processor: S:INFEN-DELY3
----model: MEM-MOD3---> processor: C:MEM-MOD3
-----model: BUFFER3---> processor: S:BUFFER3
-----model: MEMORY3---> processor: S:MEMORY3
-----model: MEM-DELY3---> processor: S:MEM-DELY3
---model: CPU2---> processor: C:CPU2
----model: INF-MOD2---> processor: C:INF-MOD2
-----model: INFEN2---> processor: S:INFEN2
-----model: INFEN-DELY2---> processor: S:INFEN-DELY2
----model: MEM-MOD2---> processor: C:MEM-MOD2
-----model: BUFFER2---> processor: S:BUFFER2
-----model: MEMORY2---> processor: S:MEMORY2
-----model: MEM-DELY2---> processor: S:MEM-DELY2
---model: CPU1---> processor: C:CPU1
----model: INF-MOD1---> processor: C:INF-MOD1
-----model: INFEN1---> processor: S:INFEN1
-----model: INFEN-DELY1---> processor: S:INFEN-DELY1
----model: MEM-MOD1---> processor: C:MEM-MOD1
-----model: BUFFER1---> processor: S:BUFFER1
-----model: MEMORY1---> processor: S:MEMORY1
-----model: MEM-DELY1---> processor: S:MEM-DELY1
---model: CPU0---> processor: C:CPU0
----model: INF-MOD0---> processor: C:INF-MOD0
-----model: INFEN0---> processor: S:INFEN0
-----model: INFEN-DELY0---> processor: S:INFEN-DELY0
----model: MEM-MOD0---> processor: C:MEM-MOD0
-----model: BUFFER0---> processor: S:BUFFER0
-----model: MEMORY0---> processor: S:MEMORY0
-----model: MEM-DELY0---> processor: S:MEM-DELY0

wish to initialize  hc-CPUS ? (y/n)
y
for hc-CPUS
choose one of:  (INIT-NEW INIT-PROCS 
INIT-ONE INIT-ALL)
init-all
Wish to initialize  CPU3 ? (y/n)
y
Wish to initialize  INF-MOD3 ? (y/n)
y
state s = (INF PASSIVE (((A) B) ((A B) C) ((B C) D)) - - - 10 1)
elapsed time e = 0
Wish to change state for model INFEN3? (y/n)
y

                         USE OF ADDITIONAL FEATURES
              
(send <atomic-model> inject <'port> <'value> {<elasped-time>}) facilitates 
testing of models. It creates a content-structre with the given port and 
value, sets the elapsed time, e to the value supplied (optional), and calls 
for an ext-transition.  

(print-time root-co-ordinator)  will display the accumulated execution 
times for message processing at all the processors. This data is analyzed 
by 

(analyze root-co-ordinator) for optimal mapping of abstract processors to 
physical processor. You must load "analyze.f" to get this.

[not supplied:
Flattening and deepening are operations on the model structure will 
preserve behavior. (flat-all root-co-ordinator) makes a completely flat 
model out of the hierarchical one attached to root-co-ordinator. See 
flat.doc and deep.doc. You must load "flat.f" and "deep.f".]

print-time may also be used to compare flattened and deepened structures 
for execution time improvements (useful for restructuing for production 
runs).  

(inverse-transform root-co-ordinator) will create an entity structure from 
the model attached to the root-co-ordinator. Can be used to save a 
structure for reuse after flattening or deepening.

save-all-state and restore-all-state are methods for saving and restoring 
states of all atomic-models in a hierarchical model (see source listings).

NOTE: when constructing entity structures you may receive messages from 
Scheme revealing the current state of the structure as it appears at the 
data structure level. These can be ignored. You can inhibit such messages 
in general by (message-mode-off). Remember to do (message-mode-on) to 
return Scheme messages to the console.

[not supplied:
(construct-ef) is an interactive interface for insert experimental frame 
components into a model. All experimental frame components are assumed to 
have input port 'in and output port 'out. You must load the components 
before using the interface.  Look at the couplings produced by invoking 
print-graph to understand how the coupling is done.  Load ef1.f and ef2.f 
to get this.  ]

lee.s provides a good random number generator and some basic random variates




